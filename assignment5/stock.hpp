
// Code generated by stanc v2.26.0
#include <stan/model/model_header.hpp>
namespace stock_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 44, column 2 to column 17)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 45, column 2 to column 21)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 46, column 2 to column 30)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 47, column 2 to column 24)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 48, column 2 to column 29)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 67, column 2 to column 14)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 69, column 11 to column 14)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 69, column 4 to column 73)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 70, column 4 to column 60)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 68, column 2 to line 71, column 3)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 56, column 9 to column 12)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 56, column 2 to column 71)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 58, column 2 to column 27)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 59, column 2 to column 24)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 60, column 2 to column 31)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 61, column 2 to column 26)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 62, column 2 to column 22)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 63, column 2 to column 63)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 19, column 2 to column 17)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 20, column 9 to column 10)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 20, column 2 to column 14)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 21, column 9 to column 10)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 21, column 2 to column 14)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 23, column 2 to column 20)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 24, column 2 to column 19)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 29, column 2 to column 23)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 30, column 2 to column 23)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 31, column 2 to column 19)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 32, column 2 to column 19)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 33, column 9 to column 10)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 33, column 2 to column 33)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 34, column 9 to column 10)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 34, column 2 to column 33)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 36, column 2 to column 25)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 37, column 9 to column 10)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 37, column 11 to column 14)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 37, column 2 to column 48)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 45, column 9 to column 12)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 48, column 18 to column 19)",
                                                      " (in '/notebooks/assignment5/stock.stan', line 67, column 9 to column 10)",
                                                      " (in '/notebooks/assignment5/basis.stan', line 2, column 2, included from\n'/notebooks/assignment5/stock.stan', line 15, column 0)",
                                                      " (in '/notebooks/assignment5/basis.stan', line 1, column 55, included from\n'/notebooks/assignment5/stock.stan', line 15, column 0)",
                                                      " (in '/notebooks/assignment5/basis.stan', line 9, column 2, included from\n'/notebooks/assignment5/stock.stan', line 15, column 0)",
                                                      " (in '/notebooks/assignment5/basis.stan', line 10, column 15, included from\n'/notebooks/assignment5/stock.stan', line 15, column 0)",
                                                      " (in '/notebooks/assignment5/basis.stan', line 10, column 2, included from\n'/notebooks/assignment5/stock.stan', line 15, column 0)",
                                                      " (in '/notebooks/assignment5/basis.stan', line 11, column 17, included from\n'/notebooks/assignment5/stock.stan', line 15, column 0)",
                                                      " (in '/notebooks/assignment5/basis.stan', line 11, column 2, included from\n'/notebooks/assignment5/stock.stan', line 15, column 0)",
                                                      " (in '/notebooks/assignment5/basis.stan', line 12, column 9, included from\n'/notebooks/assignment5/stock.stan', line 15, column 0)",
                                                      " (in '/notebooks/assignment5/basis.stan', line 12, column 2, included from\n'/notebooks/assignment5/stock.stan', line 15, column 0)",
                                                      " (in '/notebooks/assignment5/basis.stan', line 13, column 2, included from\n'/notebooks/assignment5/stock.stan', line 15, column 0)",
                                                      " (in '/notebooks/assignment5/basis.stan', line 8, column 53, included from\n'/notebooks/assignment5/stock.stan', line 15, column 0)",
                                                      " (in '/notebooks/assignment5/basis.stan', line 16, column 2, included from\n'/notebooks/assignment5/stock.stan', line 15, column 0)",
                                                      " (in '/notebooks/assignment5/basis.stan', line 15, column 46, included from\n'/notebooks/assignment5/stock.stan', line 15, column 0)",
                                                      " (in '/notebooks/assignment5/basis.stan', line 19, column 9, included from\n'/notebooks/assignment5/stock.stan', line 15, column 0)",
                                                      " (in '/notebooks/assignment5/basis.stan', line 19, column 11, included from\n'/notebooks/assignment5/stock.stan', line 15, column 0)",
                                                      " (in '/notebooks/assignment5/basis.stan', line 19, column 2, included from\n'/notebooks/assignment5/stock.stan', line 15, column 0)",
                                                      " (in '/notebooks/assignment5/basis.stan', line 20, column 2, included from\n'/notebooks/assignment5/stock.stan', line 15, column 0)",
                                                      " (in '/notebooks/assignment5/basis.stan', line 18, column 53, included from\n'/notebooks/assignment5/stock.stan', line 15, column 0)"};


template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__,
T2__>, -1, 1>
diagSPD_EQ(const T0__& alpha, const T1__& rho, const T2__& L, const int& M,
           std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 41;
    return stan::math::sqrt(
             multiply(
               ((pow(alpha, 2) * stan::math::sqrt((2 * stan::math::pi()))) *
                 rho),
               stan::math::exp(
                 multiply(
                   (-0.5 * pow((((rho * stan::math::pi()) / 2) / L), 2)),
                   pow(linspaced_vector(M, 1, M), 2)))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct diagSPD_EQ_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__,
T2__>, -1, 1>
operator()(const T0__& alpha, const T1__& rho, const T2__& L, const int& M,
           std::ostream* pstream__)  const 
{
return diagSPD_EQ(alpha, rho, L, M, pstream__);
}
};

template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
diagSPD_periodic(const T0__& alpha, const T1__& rho, const int& M,
                 std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ a;
    a = DUMMY_VAR__;
    
    current_statement__ = 43;
    a = (1 / pow(rho, 2));
    current_statement__ = 44;
    validate_non_negative_index("one_to_M", "M", M);
    std::vector<int> one_to_M;
    one_to_M = std::vector<int>(M, std::numeric_limits<int>::min());
    
    current_statement__ = 47;
    for (int m = 1; m <= M; ++m) {
      current_statement__ = 46;
      assign(one_to_M, cons_list(index_uni(m), nil_index_list()), m,
        "assigning variable one_to_M");}
    current_statement__ = 48;
    validate_non_negative_index("q", "M", M);
    Eigen::Matrix<local_scalar_t__, -1, 1> q;
    q = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
    stan::math::fill(q, DUMMY_VAR__);
    
    current_statement__ = 49;
    assign(q, nil_index_list(),
      stan::math::sqrt(
        multiply(((pow(alpha, 2) * 2) / stan::math::exp(a)),
          to_vector(modified_bessel_first_kind(one_to_M, a)))),
      "assigning variable q");
    current_statement__ = 50;
    return append_row(q, q);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct diagSPD_periodic_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<T0__,
T1__>, -1, 1>
operator()(const T0__& alpha, const T1__& rho, const int& M,
           std::ostream* pstream__)  const 
{
return diagSPD_periodic(alpha, rho, M, pstream__);
}
};

template <typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T2__,
stan::value_type_t<T3__>>, -1, -1>
PHI_EQ(const int& N, const int& M, const T2__& L, const T3__& x_arg__,
       std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__,
          stan::value_type_t<T3__>>;
  const auto& x = to_ref(x_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 52;
    return divide(
             stan::math::sin(
               diag_post_multiply(
                 rep_matrix(
                   multiply((stan::math::pi() / (2 * L)), add(x, L)), M),
                 linspaced_vector(M, 1, M))), stan::math::sqrt(L));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct PHI_EQ_functor__ {
template <typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T2__,
stan::value_type_t<T3__>>, -1, -1>
operator()(const int& N, const int& M, const T2__& L, const T3__& x,
           std::ostream* pstream__)  const 
{
return PHI_EQ(N, M, L, x, pstream__);
}
};

template <typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T2__,
stan::value_type_t<T3__>>, -1, -1>
PHI_periodic(const int& N, const int& M, const T2__& w0, const T3__& x_arg__,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T2__,
          stan::value_type_t<T3__>>;
  const auto& x = to_ref(x_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 54;
    validate_non_negative_index("mw0x", "N", N);
    current_statement__ = 55;
    validate_non_negative_index("mw0x", "M", M);
    Eigen::Matrix<local_scalar_t__, -1, -1> mw0x;
    mw0x = Eigen::Matrix<local_scalar_t__, -1, -1>(N, M);
    stan::math::fill(mw0x, DUMMY_VAR__);
    
    current_statement__ = 56;
    assign(mw0x, nil_index_list(),
      diag_post_multiply(rep_matrix(multiply(w0, x), M),
        linspaced_vector(M, 1, M)), "assigning variable mw0x");
    current_statement__ = 57;
    return append_col(stan::math::cos(mw0x), stan::math::sin(mw0x));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct PHI_periodic_functor__ {
template <typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T2__,
stan::value_type_t<T3__>>, -1, -1>
operator()(const int& N, const int& M, const T2__& w0, const T3__& x,
           std::ostream* pstream__)  const 
{
return PHI_periodic(N, M, w0, x, pstream__);
}
};

class stock_model final : public model_base_crtp<stock_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> x;
  Eigen::Matrix<double, -1, 1> y;
  double c_f;
  int M_f;
  double xmean;
  double ymean;
  double xsd;
  double ysd;
  Eigen::Matrix<double, -1, 1> xn;
  Eigen::Matrix<double, -1, 1> yn;
  double L_f;
  Eigen::Matrix<double, -1, -1> PHI_f;
 
 public:
  ~stock_model() { }
  
  inline std::string model_name() const final { return "stock_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.0", "stancflags = --include_paths=/notebooks/assignment5"};
  }
  
  
  stock_model(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "stock_model_namespace::stock_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 19;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 19;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 19;
      current_statement__ = 19;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 20;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 21;
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(N));
      x = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 21;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 21;
        pos__ = 1;
        current_statement__ = 21;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 21;
          assign(x, cons_list(index_uni(sym1__), nil_index_list()),
            x_flat__[(pos__ - 1)], "assigning variable x");
          current_statement__ = 21;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 22;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 23;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(N));
      y = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 23;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 23;
        pos__ = 1;
        current_statement__ = 23;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 23;
          assign(y, cons_list(index_uni(sym1__), nil_index_list()),
            y_flat__[(pos__ - 1)], "assigning variable y");
          current_statement__ = 23;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 24;
      context__.validate_dims("data initialization","c_f","double",
          context__.to_vec());
      c_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 24;
      c_f = context__.vals_r("c_f")[(1 - 1)];
      current_statement__ = 24;
      current_statement__ = 24;
      check_greater_or_equal(function__, "c_f", c_f, 0);
      current_statement__ = 25;
      context__.validate_dims("data initialization","M_f","int",
          context__.to_vec());
      M_f = std::numeric_limits<int>::min();
      
      current_statement__ = 25;
      M_f = context__.vals_i("M_f")[(1 - 1)];
      current_statement__ = 25;
      current_statement__ = 25;
      check_greater_or_equal(function__, "M_f", M_f, 1);
      current_statement__ = 26;
      xmean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 26;
      xmean = mean(x);
      current_statement__ = 27;
      ymean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 27;
      ymean = mean(y);
      current_statement__ = 28;
      xsd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 28;
      xsd = sd(x);
      current_statement__ = 29;
      ysd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 29;
      ysd = sd(y);
      current_statement__ = 30;
      validate_non_negative_index("xn", "N", N);
      current_statement__ = 31;
      xn = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(xn, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 31;
      assign(xn, nil_index_list(), divide(subtract(x, xmean), xsd),
        "assigning variable xn");
      current_statement__ = 32;
      validate_non_negative_index("yn", "N", N);
      current_statement__ = 33;
      yn = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(yn, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 33;
      assign(yn, nil_index_list(), divide(subtract(y, ymean), ysd),
        "assigning variable yn");
      current_statement__ = 34;
      L_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 34;
      L_f = (c_f * max(xn));
      current_statement__ = 35;
      validate_non_negative_index("PHI_f", "N", N);
      current_statement__ = 36;
      validate_non_negative_index("PHI_f", "M_f", M_f);
      current_statement__ = 37;
      PHI_f = Eigen::Matrix<double, -1, -1>(N, M_f);
      stan::math::fill(PHI_f, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 37;
      assign(PHI_f, nil_index_list(), PHI_EQ(N, M_f, L_f, xn, pstream__),
        "assigning variable PHI_f");
      current_statement__ = 38;
      validate_non_negative_index("beta_f", "M_f", M_f);
      current_statement__ = 39;
      validate_non_negative_index("sigma_y", "N", N);
      current_statement__ = 40;
      validate_non_negative_index("f", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += M_f;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += N;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "stock_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      local_scalar_t__ intercept;
      intercept = DUMMY_VAR__;
      
      current_statement__ = 1;
      intercept = in__.scalar();
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_f;
      beta_f = Eigen::Matrix<local_scalar_t__, -1, 1>(M_f);
      stan::math::fill(beta_f, DUMMY_VAR__);
      
      current_statement__ = 2;
      beta_f = in__.vector(M_f);
      local_scalar_t__ lengthscale_f;
      lengthscale_f = DUMMY_VAR__;
      
      current_statement__ = 3;
      lengthscale_f = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        lengthscale_f = stan::math::lb_constrain(lengthscale_f, 0, lp__);
      } else {
        current_statement__ = 3;
        lengthscale_f = stan::math::lb_constrain(lengthscale_f, 0);
      }
      local_scalar_t__ sigma_f;
      sigma_f = DUMMY_VAR__;
      
      current_statement__ = 4;
      sigma_f = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        sigma_f = stan::math::lb_constrain(sigma_f, 0, lp__);
      } else {
        current_statement__ = 4;
        sigma_f = stan::math::lb_constrain(sigma_f, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_y;
      sigma_y = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(sigma_y, DUMMY_VAR__);
      
      current_statement__ = 5;
      sigma_y = in__.vector(N);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(sigma_y, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_y[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma_y");
        } else {
          current_statement__ = 5;
          assign(sigma_y, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_y[(sym1__ - 1)], 0),
            "assigning variable sigma_y");
        }}
      {
        current_statement__ = 11;
        validate_non_negative_index("diagSPD_f", "M_f", M_f);
        Eigen::Matrix<local_scalar_t__, -1, 1> diagSPD_f;
        diagSPD_f = Eigen::Matrix<local_scalar_t__, -1, 1>(M_f);
        stan::math::fill(diagSPD_f, DUMMY_VAR__);
        
        current_statement__ = 12;
        assign(diagSPD_f, nil_index_list(),
          diagSPD_EQ(sigma_f, lengthscale_f, L_f, M_f, pstream__),
          "assigning variable diagSPD_f");
        current_statement__ = 13;
        lp_accum__.add(normal_lpdf<propto__>(intercept, 0, 1));
        current_statement__ = 14;
        lp_accum__.add(normal_lpdf<propto__>(beta_f, 0, 1));
        current_statement__ = 15;
        lp_accum__.add(normal_lpdf<propto__>(lengthscale_f, 0, 1));
        current_statement__ = 16;
        lp_accum__.add(normal_lpdf<propto__>(sigma_f, 0, .5));
        current_statement__ = 17;
        lp_accum__.add(normal_lpdf<propto__>(sigma_y, 0, 5));
        current_statement__ = 18;
        lp_accum__.add(
          normal_lpdf<propto__>(yn,
            add(intercept, multiply(PHI_f, elt_multiply(diagSPD_f, beta_f))),
            sigma_y));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "stock_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double intercept;
      intercept = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      intercept = in__.scalar();
      Eigen::Matrix<double, -1, 1> beta_f;
      beta_f = Eigen::Matrix<double, -1, 1>(M_f);
      stan::math::fill(beta_f, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      beta_f = in__.vector(M_f);
      double lengthscale_f;
      lengthscale_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      lengthscale_f = in__.scalar();
      current_statement__ = 3;
      lengthscale_f = stan::math::lb_constrain(lengthscale_f, 0);
      double sigma_f;
      sigma_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_f = in__.scalar();
      current_statement__ = 4;
      sigma_f = stan::math::lb_constrain(sigma_f, 0);
      Eigen::Matrix<double, -1, 1> sigma_y;
      sigma_y = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(sigma_y, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      sigma_y = in__.vector(N);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 5;
        assign(sigma_y, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma_y[(sym1__ - 1)], 0),
          "assigning variable sigma_y");}
      vars__.emplace_back(intercept);
      for (int sym1__ = 1; sym1__ <= M_f; ++sym1__) {
        vars__.emplace_back(beta_f[(sym1__ - 1)]);}
      vars__.emplace_back(lengthscale_f);
      vars__.emplace_back(sigma_f);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(sigma_y[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> f;
      f = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(f, std::numeric_limits<double>::quiet_NaN());
      
      {
        current_statement__ = 7;
        validate_non_negative_index("diagSPD_f", "M_f", M_f);
        Eigen::Matrix<double, -1, 1> diagSPD_f;
        diagSPD_f = Eigen::Matrix<double, -1, 1>(M_f);
        stan::math::fill(diagSPD_f, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 8;
        assign(diagSPD_f, nil_index_list(),
          diagSPD_EQ(sigma_f, lengthscale_f, L_f, M_f, pstream__),
          "assigning variable diagSPD_f");
        current_statement__ = 9;
        assign(f, nil_index_list(),
          add(
            multiply(
              add(intercept,
                multiply(PHI_f, elt_multiply(diagSPD_f, beta_f))), ysd),
            ymean), "assigning variable f");
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(f[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double intercept;
      intercept = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      intercept = context__.vals_r("intercept")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> beta_f;
      beta_f = Eigen::Matrix<double, -1, 1>(M_f);
      stan::math::fill(beta_f, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_f_flat__;
        current_statement__ = 2;
        assign(beta_f_flat__, nil_index_list(), context__.vals_r("beta_f"),
          "assigning variable beta_f_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= M_f; ++sym1__) {
          current_statement__ = 2;
          assign(beta_f, cons_list(index_uni(sym1__), nil_index_list()),
            beta_f_flat__[(pos__ - 1)], "assigning variable beta_f");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      double lengthscale_f;
      lengthscale_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      lengthscale_f = context__.vals_r("lengthscale_f")[(1 - 1)];
      double lengthscale_f_free__;
      lengthscale_f_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      lengthscale_f_free__ = stan::math::lb_free(lengthscale_f, 0);
      double sigma_f;
      sigma_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_f = context__.vals_r("sigma_f")[(1 - 1)];
      double sigma_f_free__;
      sigma_f_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_f_free__ = stan::math::lb_free(sigma_f, 0);
      Eigen::Matrix<double, -1, 1> sigma_y;
      sigma_y = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(sigma_y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_y_flat__;
        current_statement__ = 5;
        assign(sigma_y_flat__, nil_index_list(), context__.vals_r("sigma_y"),
          "assigning variable sigma_y_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 5;
          assign(sigma_y, cons_list(index_uni(sym1__), nil_index_list()),
            sigma_y_flat__[(pos__ - 1)], "assigning variable sigma_y");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_y_free__;
      sigma_y_free__ = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(sigma_y_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 5;
        assign(sigma_y_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma_y[(sym1__ - 1)], 0),
          "assigning variable sigma_y_free__");}
      vars__.emplace_back(intercept);
      for (int sym1__ = 1; sym1__ <= M_f; ++sym1__) {
        vars__.emplace_back(beta_f[(sym1__ - 1)]);}
      vars__.emplace_back(lengthscale_f_free__);
      vars__.emplace_back(sigma_f_free__);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(sigma_y_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("intercept");
    names__.emplace_back("beta_f");
    names__.emplace_back("lengthscale_f");
    names__.emplace_back("sigma_f");
    names__.emplace_back("sigma_y");
    names__.emplace_back("f");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M_f)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "intercept");
    for (int sym1__ = 1; sym1__ <= M_f; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_f" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "lengthscale_f");
    param_names__.emplace_back(std::string() + "sigma_f");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_y" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "intercept");
    for (int sym1__ = 1; sym1__ <= M_f; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_f" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "lengthscale_f");
    param_names__.emplace_back(std::string() + "sigma_f");
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_y" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_f\",\"type\":{\"name\":\"vector\",\"length\":" << M_f << "},\"block\":\"parameters\"},{\"name\":\"lengthscale_f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_y\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_f\",\"type\":{\"name\":\"vector\",\"length\":" << M_f << "},\"block\":\"parameters\"},{\"name\":\"lengthscale_f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_y\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}
using stan_model = stock_model_namespace::stock_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return stock_model_namespace::profiles__;
}

#endif


